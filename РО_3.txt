from matplotlib.ticker import MultipleLocator
import matplotlib.pyplot as plt
import numpy as np
from random import randint
import random
import math


def D(x,z): # расстояние D от точки до центра кластера
    res = 0
    sum = 0
    for i in range(len(x)):
        sum += (x[i] - z[i])**2
    return math.sqrt(sum)

def d(x,w):
  return x[0]*w[0] + x[1]*w[1] + 1*w[2]
    
def delta_d(x,z1,z2):
  if z1[1] != z2[1]: # построение перпендикуляра- Разделяющая граница-y выражаем через x
    y = (x*(z2[0] - z1[0]) + 1/2*(-1*(z2[0]*z2[0] + z2[1]*z2[1]) + (z1[0]*z1[0] + z1[1]*z1[1]) )) / (z1[1] - z2[1])
    return y
  return 0

def isFree(z,x,k):                                                                     # проверка свободна ли точка или принадлежит кластеру
            flag = False
            epsilon = 0.1
            d_max = -10**6
            for i in range(0, k):
                d_cur = d(x, [z[i][0], z[i][1],-1/2*(z[i][0]**2 + z[i][1]**2)])          # Решающая функция
                if d_cur - d_max > epsilon:                                             #если разность растояний болльше,чем эпсилон  
                    d_max = d_cur
                    flag = False 
                elif abs(d_cur - d_max) < epsilon:
                    flag = True
            return flag

def draw_di(z,k):    
        runner = 50
        i = -5
        while i < 10:
            for j in range(0,k):
                for l in range(0, k):
                    if(j != l):
                        y = delta_d(i,z[j], z[l])
                        if y < 5 and y > -2:
                            x = [i,y]
                            if isFree(z,x,k):
                                plt.scatter(x[0], x[1], color = 'purple', s = 1.3)     #рисуем точки
                                
            i += float(1/runner)

def firstAlgorithm(x, cur_x):
        T = 2  # T=4 - 2 кластера,T=1 - 5 кластеров, T=5 - 3 кластера
        j =0
        len_X = len(x)
        z = []
        k = 0
        N = []
        colors = ['blue','green']
        #step1
        z.append(x[5]) # центр первого кластера
        N.append(1)
        k +=1
        plt.scatter(z[0][0], z[0][1], color = colors[k-1], marker = '*')

        #step2
        if(D(x[j+1],z[j]) > T):
            k +=1
            N.append(1)
            z.append(x[j+1])
            plt.scatter(z[len(z)-1][0], z[len(z)-1][1], color = colors[k-1], s = 5)

        else:
            N[0] +=1
            plt.scatter(x[j+1][0], x[j+1][1], color = colors[k-1], s = 5)

        j +=1

        #step3
        while(j+1 < len_X):
            Dmin = D(x[j+1],z[0])
            index_Dmin = 0
            flag = 0
            for i in range(0,k):
                Di = D(x[j+1],z[i])
                if(Di > T): 
                    flag +=1
                else:
                    if(Dmin > Di):
                        index_Dmin = i
                        Dmin = Di
            if(flag >= k):  #создаем новый кластер
                k +=1
                N.append(1)
                z.append(x[j+1])
                colors.append('#'+''.join([random.choice('01479ACDEF') for i in range(6)]))
                plt.scatter(z[len(z)-1][0], z[len(z)-1][1], color = colors[k-1], marker = '*')
                print(colors[k-1])
            else:
                N[index_Dmin] += 1 
                plt.scatter(x[j+1][0], x[j+1][1], color = colors[index_Dmin], s = 5)
            j +=1

        draw_di(z,k)
        on_press(cur_x,T,k,z,colors)

def on_press(cur_x,T,k,z,colors):
        x = [cur_x[0],cur_x[1]]
        index = 0
        flag = False
        di = 0
        epsilon = 0.1
        d_max = -10**6
        for i in range(0, k):
            d_cur = d(x, [z[i][0], z[i][1],-1/2*(z[i][0]**2 + z[i][1]**2)])
            print(d_cur)
            print('claster =',colors[i])
            if d_cur - d_max > epsilon:
                d_max = d_cur
                index = i
                flag = False
            elif abs(d_cur - d_max) < epsilon:
                flag = True
        if flag == True:
            plt.scatter(x[0],x[1], color = 'black')
        else:
            plt.scatter(x[0],x[1], color = colors[index])

def main():
    x = [-2.61,-2.90,-2.69,-3.65,-2.37,-3.69,-3.19,2.82,3.34,3.10,3.20,3.36,3.38,3.01,8.90,8.38,9.26,9.10,9.24,8.93,9.67]
    
    y = [1.15,0.85,0.89,0.33,1.67,0.54,0.93,1.01,0.50,0.85,0.63,0.89,0.69,1.42,1.68,2.23,2.74,2.75,2.08,3.01,2.23]
    figure = plt.figure()
    figure = figure.add_subplot()
    plenty = []
    figure.xaxis.set_major_locator(MultipleLocator(base=1))
    figure.yaxis.set_major_locator(MultipleLocator(base=1))
    figure.set_aspect('equal', adjustable='box')
    plt.grid()
    for i in range(len(x)):
      plenty.append([x[i],y[i]])
    #print(plenty)
    cur_x=[0,0]
    cur_x[0] = float(input("x= "))
    cur_x[1] = float(input("y= "))
    firstAlgorithm(plenty,cur_x)

if __name__ == "__main__":
    main()