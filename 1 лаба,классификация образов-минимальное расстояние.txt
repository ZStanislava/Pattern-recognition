import matplotlib.pyplot as plt
import numpy as np
import pylab


def main():
    # начальные данные
    w1 = [(0, 0), (0, 1), (1, 0), (1, 1)]  # класс 1
    n1 = 4
    w2 = [(5, 0), (5, 1), (6, 0), (6, 1)]  # класс 2
    n2 = 4

    # средние классов
    z1 = [(w1[0][0] + w1[1][0] + w1[2][0] + w1[3][0]) / n1, (w1[0][1] + w1[1][1] + w1[2][1] + w1[3][1]) / n1]
    z2 = [(w2[0][0] + w2[1][0] + w2[2][0] + w2[3][0]) / n2,
          (w2[0][1] + w2[1][1] + w2[2][1] + w2[3][1]) / n2]
    print(f"Средняя точка класса w1: ({z1[0]}, {z1[1]}). Средняя точка класса w2: ({z2[0]}, {z2[1]})")

    middle = [(z1[0] + z2[0]) / 2, (z1[1] + z2[1]) / 2]
    print(f"Координата середины отрезка: ({middle[0]}, {middle[1]})")

    # построение линейной функции
    k = (z1[1] - z2[1]) / (z1[0] - z2[0])
    b = z1[0] - k * z1[1]
    x = np.arange(-1, 15.01, 0.001)
    plt.plot(x, k * x + b, c='gray')

    # введение произвольной точки
    t = [0, 0]
    t[0] = float(input())
    print(t)
    t[1] = float(input())
    print(t)

    # построение перпендикуляра- Разделяющая граница-y выражаем через x
    if z1[1] != z2[1]:
        plt.plot(x, (x * z2[0] - x * z1[0] - 0.5 * z2[0] * z2[0] - 0.5 * z2[1] * z2[1] +
                     0.5 * z1[0] * z1[0] + 0.5 * z1[1] *
                     z1[1]) / (z1[1] - z2[1]), c='gray')
    else: #учитываем,что знаменатель не равен 0
        y = np.arange(-1, 15, 0.001)
        p = np.zeros(len(y))
        p[:] = middle[0]
        plt.plot(p, y, c='gray')

    # вычисление принадлежности к классу и построение точек РЕШАЮЩАЯ ФУНКЦИЯ
    d_x1 = t[0] * z1[0] + t[1] * z1[1] - 0.5 * z1[0] * z1[0] - 0.5 * z1[1] * z1[1] #РЕШАЮЩАЯ ФУНКЦИЯ
    d_x2 = t[0] * z2[0] + t[1] * z2[1] - 0.5 * z2[0] * z2[0] - 0.5 * z2[1] * z2[1] #РЕШАЮЩАЯ ФУНКЦИЯ
    print(t[0] * t[0] + t[1] * t[1] - 2 * t[0] * z1[0] - 2 * t[1] * z1[1] + z1[0] * z1[0] + z1[1] * z1[1]) # расстояние от х до z1
    print(t[0] * t[0] + t[1] * t[1] - 2 * t[0] * z2[0] - 2 * t[1] * z2[1] + z2[0] * z2[0] + z2[1] * z2[1]) # расстояние от х до z2
    if d_x1 - d_x2 > 0:
        plt.text(10, 10, "d_x1 = ")
        plt.text(11.4, 10, d_x1)
        plt.text(10, 9.4, "d_x2 = ")
        plt.text(11.4, 9.4, d_x2)
        plt.scatter([w1[0][0], w1[1][0], w1[2][0], w1[3][0], t[0]], [w1[0][1], w1[1][1], w1[2][1], w1[3][1], t[1]],
                    c='green', linewidths=1)
        plt.scatter([w2[0][0], w2[1][0], w2[2][0], w2[3][0]],
                    [w2[0][1], w2[1][1], w2[2][1], w2[3][1]], c='red', linewidths=1)
    elif d_x1 - d_x2 < 0:
        plt.text(10, 10, "d_x1 = ")
        plt.text(11.4, 10, d_x1)
        plt.text(10, 9.4, "d_x2 = ")
        plt.text(11.4, 9.4, d_x2)
        plt.scatter([w1[0][0], w1[1][0], w1[2][0], w1[3][0]], [w1[0][1], w1[1][1], w1[2][1], w1[3][1]],
                    c='green', linewidths=1)
        plt.scatter([w2[0][0], w2[1][0], w2[2][0], w2[3][0], t[0]],
                    [w2[0][1], w2[1][1], w2[2][1], w2[3][1], t[1]], c='red', linewidths=1)
    else:
        plt.text(9, 9.7, "ОНР:")
        plt.text(10, 12, "d_x1 = ")
        plt.text(11.4, 10, d_x1)
        plt.text(10, 9.4, "d_x2 = ")
        plt.text(11.4, 9.4, d_x2)
        plt.scatter([w1[0][0], w1[1][0], w1[2][0], w1[3][0]], [w1[0][1], w1[1][1], w1[2][1], w1[3][1]],
                    c='green', linewidths=1)
        plt.scatter([w2[0][0], w2[1][0], w2[2][0], w2[3][0]],
                    [w2[0][1], w2[1][1], w2[2][1], w2[3][1]], c='red', linewidths=1)
        plt.scatter(t[0], t[1], c='gray', linewidths=1)

    # построение сетки
    plt.scatter([z1[0], z2[0]], [z1[1], z2[1]], c='black', linewidths=0.01)
    plt.text(-1, -16, "x = (")
    plt.text(0, -16, t[0])
    plt.text(0.8, -16, ", ")
    plt.text(1, -16, t[1])
    plt.text(1.8, -16, ")")
    plt.text(-2, 11, "класс {(0,0),(0,1),(1,0),(1,1)}", c='green')
    plt.text(-2, 9.4, "класс {(5,-5),(6,-6),(5,-6),(6,-5)}", c='red')
    plt.text(12, -16, "лаба 1")
    pylab.xticks(range(-1, 13))
    pylab.yticks(range(-8, 4))
    plt.xlim(-1, 13)
    plt.ylim(-8, 4)
    plt.grid()
    plt.show()


if __name__ == '__main__':
    main()

